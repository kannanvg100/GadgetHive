<div class="d-flex gap-1">
    <div class="thumbnails">
        {{#each images}}
        <img src="https://gadgethive-s3.s3.amazonaws.com/images/{{this}}" alt="thumbnail{{@index}}" class="thumbnail" />
        {{/each}}
    </div>
    <div class="image-container position-relative">
        <div class="image detail-view"></div>
        <div id="favorite-button" data-status={{isWishlisted}}>
            {{#if isWishlisted}}
            <img class="fav-icon" src="/images/favorite_filled.svg" alt="">
            {{else}}
            <img class="fav-icon" src="/images/favorite_gray.svg" alt="">
            {{/if}}
        </div>
    </div>
</div>

<style>
    .thumbnails {
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 10px;
    }

    .thumbnails img {
        width: 70px;
        height: 70px;
        object-fit: contain;
        cursor: pointer;
        border: 2px solid #f4f4f4;
        border-radius: 3px;
        padding: 3px;
    }

    .thumbnails img.selected {
        border: 2px solid #cccccc;
    }

    .image-container {
        min-width: 390px;
        height: 390px;
        border: 2px solid #f4f4f4;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .image-container .image {
        width: 340px;
        height: 340px;
        border-radius: 3x;
        background-position: center center;
        background-image: url('https://gadgethive-s3.s3.amazonaws.com/images/{{images.[0]}}');
        background-repeat: no-repeat;
        background-size: contain;
        transition: background-image 0.05s linear;
    }

    .fav-icon {
        position: absolute;
        top: 16px;
        right: 16px;
        width: 24px;
        height: 24px;
        cursor: pointer;
    }
</style>

<script>
    const thumbnails = document.querySelectorAll(".thumbnail")
    const previewImage = document.querySelector(".detail-view")
    let lastItem = thumbnails[0]
    lastItem.classList.add('selected');
    thumbnails.forEach(item => {
        item.addEventListener("click", e => {
            previewImage.style.backgroundImage = `url('${item.src}')`;
            lastItem.classList.remove('selected');
            item.classList.add('selected');
            lastItem = item;
        })
    })
</script>

<script>
    const image = document.querySelector('.detail-view')

    var imageCss = window.getComputedStyle(image, false),
        imageUrl = imageCss.backgroundImage
            .slice(4, -1).replace(/['"]/g, '');

    var imageSrc = new Image();
    imageSrc.onload = function () {
        var imageWidth = imageSrc.naturalWidth,
            imageHeight = imageSrc.naturalHeight,
            ratio = imageHeight / imageWidth;

        image.onmousemove = function (e) {
            var boxWidth = image.clientWidth,
                x = e.pageX - this.offsetLeft,
                y = e.pageY - this.offsetTop,
                xPercent = x / (boxWidth / 100) + '%',
                yPercent = y / (boxWidth * ratio / 100) + '%';

            // Update styles w/ actual size
            Object.assign(image.style, {
                width: 380 + 'px',
                height: 380 + 'px',
                backgroundPosition: xPercent + ' ' + yPercent,
                backgroundSize: imageWidth * 1.8 + 'px'
            });
        };

        // Reset when mouse leaves
        image.onmouseleave = function (e) {
            Object.assign(image.style, {
                width: 340 + 'px',
                height: 340 + 'px',
                backgroundPosition: 'center',
                backgroundSize: 'contain'
            });
        };
    }

    imageSrc.src = imageUrl;

</script>

<script>
    const wishlistBtn = document.querySelector("#favorite-button")
    const favoriteSvg = document.querySelector(".fav-icon")
    wishlistBtn.addEventListener("click", () => {
        wishlistBtn.style.pointerEvents = "none"
        const productId = "{{product._id}}"
        const url = `/wishlist/update/?id=${productId}`
        const status = wishlistBtn.getAttribute('data-status')
        fetch(url, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    wishlistBtn.style.pointerEvents = "all"
                    if (status == 'true') {
                        wishlistBtn.setAttribute('data-status', 'false')
                        favoriteSvg.src = "/images/favorite_gray.svg"
                    } else {
                        wishlistBtn.setAttribute('data-status', 'true')
                        favoriteSvg.src = "/images/favorite_filled.svg"
                    }
                } else {
                    wishlistBtn.style.pointerEvents = "all"
                    Toastify({ text: data.message }).showToast();
                }
            })
    })
</script>