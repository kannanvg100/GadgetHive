<div class="d-flex gap-2">
    <div class="thumbnails">
        {{#each images}}
        <img src="{{getImageUrl this}}" alt="Image 1" class="thumbnail" />
        {{/each}}
    </div>
    <div class="image-container">
        <div class="image detail-view"></div>
    </div>
</div>

<style>
    .image-container .image{
        width: 380px;
        height: 380px;
        border-radius: 3x;
        background-position: center center;
        background-image: url({{getFirstImageUrl images}});
        background-repeat: no-repeat;
        background-size: contain;
        transition: background-image 0.05s linear;
    }
</style>

<script>
    const thumbnails = document.querySelectorAll(".thumbnail")
    const previewImage = document.querySelector(".detail-view")
    let lastItem = thumbnails[0]
    lastItem.classList.add('selected');
    thumbnails.forEach(item =>{
        item.addEventListener("click", e=>{
            previewImage.style.backgroundImage = `url('${item.src}')`;
            lastItem.classList.remove('selected');
            item.classList.add('selected');
            lastItem = item;
        })
    })
</script>

<script>
  const image = document.querySelector('.detail-view')

    var imageCss = window.getComputedStyle(image, false),
      imageUrl = imageCss.backgroundImage
                         .slice(4, -1).replace(/['"]/g, '');

    var imageSrc = new Image();
    imageSrc.onload = function() {
      var imageWidth = imageSrc.naturalWidth,
          imageHeight = imageSrc.naturalHeight,
          ratio = imageHeight / imageWidth;

      image.onmousemove = function(e) {
        var boxWidth = image.clientWidth,
            x = e.pageX - this.offsetLeft,
            y = e.pageY - this.offsetTop,
            xPercent = x / (boxWidth / 100) + '%',
            yPercent = y / (boxWidth * ratio / 100) + '%';

        // Update styles w/ actual size
        Object.assign(image.style, {
            width: 400 + 'px',
            height: 400 + 'px',
          backgroundPosition: xPercent + ' ' + yPercent,
          backgroundSize: imageWidth * 1.8 + 'px'
        });
      };

      // Reset when mouse leaves
      image.onmouseleave = function(e) {
        Object.assign(image.style, {
            width: 380 + 'px',
            height: 380 + 'px',
          backgroundPosition: 'center',
          backgroundSize: 'contain'
        });
      };
    }
    
    imageSrc.src = imageUrl;
  
</script>